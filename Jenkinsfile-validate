pipeline {
    agent any
    environment {
        SFDX_AUTH_URL = credentials('SFDX_AUTH_URL_HSU')
        SFDX_ALIAS = 'hsu'
        PACKAGE_DIR = 'force-app'
        SF_DISABLE_TELEMETRY = "true"
        SF_CMD = 'C:\\Users\\Manu\\AppData\\Local\\sf\\client\\2.92.7-df40848\\bin\\sf.cmd'
        // AÑADIDO: Para confirmar automáticamente la instalación del plugin
        SF_DISABLE_AUTOUPDATE = "true"
    }
    stages {
        stage('Checkout') { 
            steps { 
                checkout scm 
                script {
                    // Obtener información de los commits para el delta
                    env.FIRST_COMMIT = bat(script: "git rev-parse HEAD~1", returnStdout: true).trim()
                    env.LAST_COMMIT = bat(script: "git rev-parse HEAD", returnStdout: true).trim()
                    echo "First commit: ${env.FIRST_COMMIT}"
                    echo "Last commit: ${env.LAST_COMMIT}"
                }
            }
        }
        
        stage('Verificar SFDX') { 
            steps { 
                bat "${SF_CMD} --version" 
            }
        }
        
        stage('Authenticate') {
            steps {
                bat 'echo %SFDX_AUTH_URL% > auth_url.txt'
                bat "${SF_CMD} org login sfdx-url --sfdx-url-file auth_url.txt --alias %SFDX_ALIAS%"
            }
        }
        
        stage('Instalar SGD Plugin') {
            steps {
                script {
                    // SOLUCIÓN 1: Usar echo para confirmar automáticamente
                    try {
                        def pluginCheck = bat(script: "${SF_CMD} plugins | findstr sfdx-git-delta", returnStatus: true)
                        if (pluginCheck != 0) {
                            echo "Instalando sfdx-git-delta plugin..."
                            // Usar echo "y" para confirmar automáticamente
                            bat 'echo y | "%SF_CMD%" plugins install sfdx-git-delta'
                        } else {
                            echo "Plugin sfdx-git-delta ya está instalado"
                        }
                    } catch (Exception e) {
                        echo "Error instalando plugin: ${e.getMessage()}"
                        echo "Intentando instalación alternativa..."
                        // SOLUCIÓN 2: Instalar via npm directamente
                        bat "npm install -g sfdx-git-delta"
                    }
                }
            }
        }
        
        stage('Crear package.xml') {
            steps {
                echo "Creando package.xml basado en diferencias entre commits"
                bat "dir"
                
                script {
                    try {
                        // Intentar usar el plugin SF
                        bat "${SF_CMD} sgd source delta --from ${env.FIRST_COMMIT} --to ${env.LAST_COMMIT} --output ."
                    } catch (Exception e) {
                        echo "Error con SF CLI, intentando con sgd directamente..."
                        // ALTERNATIVA: Usar sgd directamente si se instaló via npm
                        bat "sgd --from ${env.FIRST_COMMIT} --to ${env.LAST_COMMIT} --output ."
                    }
                }
                
                // Verificar que se creó el package
                bat "if exist package\\package.xml (echo Package.xml creado exitosamente) else (echo ERROR: package.xml no encontrado)"
                bat "if exist package\\package.xml type package\\package.xml"
            }
        }
        
        stage('Crear lista de tests') {
            steps {
                script {
                    // Crear archivo con los tests específicos
                    def testList = "HSU_SistemasUpdater_TEST,HSU_UTSUpdater_TEST"
                    writeFile file: 'test-list.txt', text: testList
                    echo "Tests a ejecutar: ${testList}"
                    env.TEST_LIST = testList
                }
            }
        }
        
        stage('Validar código') {
            steps {
                script {
                    try {
                        // Verificar si existe package.xml antes de usarlo
                        if (fileExists('package\\package.xml')) {
                            echo "Usando package.xml generado para validación delta"
                            def deployResult = bat(
                                script: "${SF_CMD} project deploy validate --manifest package\\package.xml --json --test-level RunSpecifiedTests --tests ${env.TEST_LIST} --target-org %SFDX_ALIAS%",
                                returnStdout: true
                            ).trim()
                            echo "Resultado del deploy: ${deployResult}"
                        } else {
                            echo "Package.xml no encontrado, usando validación completa como fallback"
                            bat "${SF_CMD} project deploy validate --source-dir force-app/main/default/objects --source-dir force-app/main/default/classes --target-org %SFDX_ALIAS% --test-level RunSpecifiedTests --tests ${env.TEST_LIST}"
                        }
                        
                    } catch (Exception e) {
                        echo "Error en la validación: ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }
    }
    post {
        always {
            // Limpiar archivos temporales
            bat "if exist auth_url.txt del auth_url.txt"
            bat "if exist test-list.txt del test-list.txt"
        }
        success { 
            echo "Validación completada con éxito." 
            echo "Tests ejecutados: ${env.TEST_LIST}"
        }
        failure { 
            echo "Errores en la validación. Revisa el log de Jenkins." 
        }
    }
}