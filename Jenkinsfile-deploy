pipeline {
    agent any
    environment {
        SFDX_AUTH_URL = credentials('SFDX_AUTH_URL_PRE')
        SFDX_ALIAS = 'pre'
        SF_CMD = 'C:\\Users\\Manu\\AppData\\Local\\sf\\client\\2.92.7-df40848\\bin\\sf.cmd'
        GITHUB_TOKEN = credentials('github-pat')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    updateGitHubStatus('pending', 'Iniciando Deploy...', 'production-deploy')
                    echo "üöÄ Iniciando pipeline de Deploy a Producci√≥n"
                }
            }
        }

        stage('Generar Package con Delta') {
            steps {
                script {
                    echo "üì¶ Generando package.xml con cambios desde HSU_START a HEAD..."

                    // Autenticaci√≥n
                    echo "üîê Autenticando con Salesforce..."
                    bat 'echo %SFDX_AUTH_URL% > auth_url.txt'
                    bat "${SF_CMD} org login sfdx-url --sfdx-url-file auth_url.txt --alias %SFDX_ALIAS%"
                    echo "‚úÖ Autenticaci√≥n exitosa"
                    
                    // Determinar commits
                    def fromCommit = bat(script: "git rev-list -n 1 HSU_START", returnStdout: true).trim()
                    def toCommit = bat(script: "git rev-parse HEAD", returnStdout: true).trim()

                    echo "üîÑ Generando delta entre ${fromCommit} (HSU_START) y ${toCommit} (HEAD)"
                    
                    // Crear carpeta "package"
                    bat "if not exist package mkdir package"

                    try {
                        // Generar delta con sgd
                        bat "\"${SF_CMD}\" sgd source delta --from \"${fromCommit}\" --to \"${toCommit}\" --output package --generate-delta"
                        echo "‚úÖ package.xml generado con delta"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Error generando delta: ${e.getMessage()}"
                    }

                    // Verificar package.xml
                    if (fileExists('package\\package.xml')) {
                        echo "üìÑ Contenido de package.xml:"
                        bat "type package\\package.xml"
                    } else {
                        echo "‚ùå No se gener√≥ package.xml"
                    }
                }
            }
        }

        stage('Desplegar en Producci√≥n') {
            steps {
                script {
                    updateGitHubStatus('pending', 'Desplegando en Producci√≥n...', 'production-deploy')

                    try {
                        bat "${SF_CMD} project deploy start --manifest package\\package.xml --target-org %SFDX_ALIAS% --wait 30"
                        updateGitHubStatus('success', 'Deploy exitoso', 'production-deploy')
                        echo "‚úÖ Deploy completado exitosamente"
                    } catch (Exception e) {
                        updateGitHubStatus('failure', 'Deploy fall√≥ en Salesforce', 'production-deploy')
                        error "‚ùå Deploy fall√≥: ${e.getMessage()}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                bat "if exist auth_url.txt del auth_url.txt"
                echo "üßπ Limpieza finalizada"
            }
        }
    }
}

def updateGitHubStatus(state, description, context) {
    try {
        def repoUrl = scm.getUserRemoteConfigs()[0].getUrl()
        def repoName = repoUrl.tokenize('/').last().replace('.git', '')
        def repoOwner = repoUrl.tokenize('/')[-2]
        def commitSha = env.GIT_COMMIT
        def targetUrl = "${BUILD_URL}console"

        def payload = [
            state       : state,
            target_url  : targetUrl,
            description : description,
            context     : "jenkins/${context}"
        ]

        def jsonPayload = groovy.json.JsonOutput.toJson(payload)

        httpRequest(
            acceptType: 'APPLICATION_JSON',
            contentType: 'APPLICATION_JSON',
            httpMode: 'POST',
            requestBody: jsonPayload,
            url: "https://api.github.com/repos/${repoOwner}/${repoName}/statuses/${commitSha}",
            customHeaders: [
                [name: 'Authorization', value: 'token ' + GITHUB_TOKEN_PSW],
                [name: 'User-Agent', value: 'Jenkins-Pipeline']
            ]
        )

        echo "‚úÖ GitHub status actualizado: ${state} - ${description}"
    } catch (Exception e) {
        echo "‚ö†Ô∏è Error actualizando GitHub status: ${e.getMessage()}"
    }
}