pipeline {
    agent any
    environment {
        GITHUB_BRANCH = 'main'
        GITHUB_TAG = 'HSU_START'
        GITHUB_BASE_API_URL = 'https://api.github.com'
        GITHUB_REPO = 'Manug0/La-Rioja-dev'
        GITHUB_AUTH_HEADER = ''

        GITHUB_TOKEN = ''

        LAST_COMMIT_SHA = ''

        AUTH_FILE_PATH = 'C:\\temp\\sfdx-auth.json'

        SF_DISABLE_TELEMETRY = 'true'
    }

    stages {
        stage('Leer datos desde GitHub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'TOKEN')]) {
                        env.GITHUB_TOKEN = TOKEN
                        env.GITHUB_AUTH_HEADER = "Authorization: Bearer ${env.GITHUB_TOKEN}"
                    }

                    def apiURL = "https://api.github.com/repos/${GITHUB_REPO}/branches/${GITHUB_BRANCH}"
                    def command = "curl -s -H \"${GITHUB_AUTH_HEADER}\" \"${apiURL}\" > branch_info.json"
                    bat command

                    def branchInfo = readJSON file: 'branch_info.json'
                    env.LAST_COMMIT_SHA = branchInfo.commit.sha

                    echo "√öltimo commit en '${GITHUB_BRANCH}': ${env.LAST_COMMIT_SHA}"
                }
            }
        }

        stage('Instalar dependencias') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'SFDX_AUTH_URL_PRE', variable: 'SFDC_AUTH_FILE')]) {
                        bat "type %SFDC_AUTH_FILE%"
                        bat "copy %SFDC_AUTH_FILE% ${AUTH_FILE_PATH}"
                    }
                    bat "sf org login sfdx-url --sfdx-url-file ${AUTH_FILE_PATH} --set-default"
                }

                bat '''
                    sf -v
                    sf config set disable-telemetry true --global
                    echo y | sf plugins install sfdx-hardis
                    echo y | sf plugins install sfdx-git-delta
                '''

                echo "Instalamos librer√≠as Node.js necesarias"
                bat 'npm install yaml fs'
            }
        }

        stage("Clonar proyecto desde GitHub") {
            steps {
                checkout scm
            }
        }

        stage("Crear package.xml") {
            steps {
                dir('La-Rioja-dev') {
                    script {
                        try {
                            echo "üîÑ Generando delta entre ${GITHUB_TAG} y ${GITHUB_LAST_COMMIT}"
                            bat "\"${SF_CMD}\" sgd source delta --from ${GITHUB_TAG} --to ${GITHUB_LAST_COMMIT} --output ."
                            
                            if (fileExists('package\\package.xml')) {
                                echo "üì¶ Package.xml generado con cambios:"
                                bat "type package\\package.xml"
                                env.HAS_CHANGES = 'true'
                            } else {
                                echo "‚úÖ Sin cambios de metadata entre ${GITHUB_TAG} y ${GITHUB_LAST_COMMIT}"
                                echo "üèÅ Pipeline completado - No hay nada que validar"
                                env.HAS_CHANGES = 'false'
                            }
                        } catch (err) {
                            echo "‚ùå Error generando package: ${err.getMessage()}"
                            currentBuild.result = 'FAILURE'
                            throw err
                        }
                    }
                }
            }
        }

        stage("üöÄ DESPLEGAR A PRODUCCI√ìN") {
            when {
                environment name: 'HAS_CHANGES', value: 'true'
            }
            steps {
                dir('La-Rioja-dev') {
                    script {
                        try {
                            bat "git switch ${GITHUB_BRANCH}"
                            
                            echo "üì¶ Contenido del package.xml para DESPLIEGUE:"
                            bat "type package\\package.xml"
                            
                            bat "sf project deploy start --manifest package\\package.xml --test-level NoTestRun"
                            
                            echo "‚úÖ üéâ DESPLIEGUE COMPLETADO EXITOSAMENTE üéâ"
                            
                        } catch (err) {
                            echo "‚ùå Error en despliegue: ${err.getMessage()}"
                            currentBuild.result = 'FAILURE'
                            throw err
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            echo "Validaci√≥n completada correctamente ‚úÖ"
        }
        failure {
            echo "Fall√≥ la validaci√≥n del paquete ‚ùå"
        }
    }
}
