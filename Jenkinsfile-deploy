pipeline {
    agent any
    environment {
        SFDX_AUTH_URL = credentials('SFDX_AUTH_URL_PRE')
        SFDX_ALIAS = 'pre'
        SF_CMD = 'C:\\Users\\Manu\\AppData\\Local\\sf\\client\\2.92.7-df40848\\bin\\sf.cmd'
        GITHUB_TOKEN = credentials('github-pat')
    }
    
    stages {
        stage('Inicializar Deploy') {
            steps {
                script {
                    updateGitHubStatus('pending', 'Iniciando deploy a producción...', 'production-deploy')
                    
                    echo "🚀 Iniciando pipeline de deploy a producción"
                    echo "Branch: ${env.BRANCH_NAME}"
                    echo "Commit: ${env.GIT_COMMIT?.take(8)}"
                }
            }
        }
        
        stage('Verificar SFDX') { 
            steps { 
                script {
                    updateGitHubStatus('pending', 'Verificando herramientas...', 'production-deploy')
                    
                    echo "🔧 Verificando SFDX CLI..."
                    bat "${SF_CMD} --version"
                    echo "✅ SFDX CLI verificado"
                }
            }
        }
        
        stage('Authenticate') {
            steps {
                script {
                    updateGitHubStatus('pending', 'Autenticando con producción...', 'production-deploy')
                    
                    echo "🔐 Autenticando con org de producción..."
                    bat 'echo %SFDX_AUTH_URL% > auth_url.txt'
                    bat "${SF_CMD} org login sfdx-url --sfdx-url-file auth_url.txt --alias %SFDX_ALIAS%"
                    echo "✅ Autenticación exitosa"
                }
            }
        }
        
        stage('Generar Package Deploy') {
            steps {
                script {
                    updateGitHubStatus('pending', 'Preparando package para deploy...', 'production-deploy')
                    
                    echo "📦 Generando package para deploy..."
                    
                    // Crear directorio package si no existe
                    bat "if not exist package mkdir package"
                    
                    try {
                        // Intentar obtener los cambios del último merge
                        def lastMergeCommit = bat(script: "git log --merges -1 --pretty=format:%%H", returnStdout: true).trim()
                        def parentCommits = bat(script: "git log --pretty=format:%%P -1 ${lastMergeCommit}", returnStdout: true).trim().split(' ')
                        
                        if (parentCommits.length >= 2) {
                            def fromCommit = parentCommits[0]  // Commit de main antes del merge
                            def toCommit = parentCommits[1]    // Último commit de la rama mergeada
                            
                            echo "🔄 Generando delta desde ${fromCommit} hasta ${toCommit}"
                            
                            // Verificar plugin sfdx-git-delta
                            def pluginCheck = bat(script: "${SF_CMD} plugins | findstr sfdx-git-delta", returnStatus: true)
                            
                            if (pluginCheck == 0) {
                                bat "\"${SF_CMD}\" sgd source delta --from \"${fromCommit}\" --to \"${toCommit}\" --output ."
                                echo "✅ Package.xml generado con delta"
                            } else {
                                echo "⚠️ Plugin sfdx-git-delta no encontrado, usando package completo"
                            }
                        } else {
                            echo "⚠️ No se pudo determinar el delta, usando package completo"
                        }
                        
                    } catch (Exception e) {
                        echo "⚠️ Error generando delta: ${e.getMessage()}"
                        echo "🔄 Usando package completo como fallback"
                    }
                    
                    // Verificar que el package.xml existe
                    if (fileExists('package\\package.xml')) {
                        echo "📄 Contenido del package.xml:"
                        bat "type package\\package.xml"
                        echo "✅ Package.xml listo para deploy"
                    } else {
                        updateGitHubStatus('failure', 'Error preparando package - Deploy cancelado', 'production-deploy')
                        error("❌ Error: package.xml no encontrado")
                    }
                }
            }
        }
        
        stage('Deploy a Producción') {
            steps {
                script {
                    updateGitHubStatus('pending', 'Ejecutando deploy en producción...', 'production-deploy')
                    echo "🚀 Iniciando deploy a producción..."
                    
                    try {
                        if (env.DEPLOY_TYPE == 'DEPLOY_CON_TESTS') {
                            echo "🧪 Deploy con tests completos..."
                            bat "${SF_CMD} project deploy start --package package\\package.xml --target-org %SFDX_ALIAS% --wait 30 --test-level RunLocalTests"
                        } else {
                            echo "🚀 Deploy normal (sin tests adicionales)..."
                            bat "${SF_CMD} project deploy start --manifest package\\package.xml --target-org %SFDX_ALIAS% --wait 30"
                        }
                        
                        echo "✅ Deploy completado exitosamente"
                        
                    } catch (Exception e) {
                        echo "❌ Error en deploy: ${e.getMessage()}"
                        updateGitHubStatus('failure', 'Deploy falló en Salesforce', 'production-deploy')
                        throw e
                    }
                }
            }
        }
        
        stage('Smoke Tests Post-Deploy') {
            steps {
                script {
                    updateGitHubStatus('pending', 'Ejecutando tests post-deploy...', 'production-deploy')
                    
                    echo "🧪 Ejecutando smoke tests post-deploy..."
                    
                    try {
                        bat "${SF_CMD} data query --query \"SELECT Id, Name FROM User LIMIT 1\" --target-org %SFDX_ALIAS%"
                        
                        echo "✅ Smoke tests pasaron - Org responde correctamente"
                        env.SMOKE_TESTS_PASSED = "true"
                        
                    } catch (Exception e) {
                        echo "❌ Smoke tests fallaron: ${e.getMessage()}"
                        env.SMOKE_TESTS_PASSED = "false"
                        updateGitHubStatus('failure', 'Smoke tests fallaron - Deploy marcado como fallido', 'production-deploy')
                        error("Smoke tests post-deploy fallaron - Deploy marcado como fallido")
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                bat "if exist auth_url.txt del auth_url.txt"
                echo "🧹 Archivos temporales limpiados"
            }
        }
        success { 
            script {
                // Solo marcar como exitoso si TODAS las verificaciones pasaron
                if (env.DEPLOY_VERIFIED == "true" && env.SMOKE_TESTS_PASSED == "true") {
                    // ✅ ÉXITO COMPLETO - Notificar a GitHub
                    updateGitHubStatus('success', 'Deploy completado exitosamente en producción', 'production-deploy')
                    
                    echo """
╔══════════════════════════════════════════════════════════════╗
║               🎉 DEPLOY A PRODUCCIÓN EXITOSO                 ║
╠══════════════════════════════════════════════════════════════╣
║ Branch: ${env.BRANCH_NAME}                                   ║
║ Commit: ${env.GIT_COMMIT?.take(8)}                           ║
║ Fecha: ${new Date()}                                         ║
║ Tipo de Deploy: ${env.DEPLOY_TYPE}                           ║
║                                                              ║
║ ✅ ESTADO: Código desplegado exitosamente en producción     ║
║ ✅ VERIFICACIÓN: Deploy confirmado como exitoso             ║
║ ✅ SMOKE TESTS: Org funcionando correctamente               ║
║ ✅ GITHUB: Status actualizado como SUCCESS                  ║
║                                                              ║
║ 🌟 Main branch ahora marcada como exitosa en GitHub         ║
╚══════════════════════════════════════════════════════════════╝
"""
                    
                    // Marcar el build como exitoso con descripción
                    currentBuild.description = "🎉 Deploy exitoso y verificado - GitHub actualizado"
                    currentBuild.result = 'SUCCESS'
                    
                } else {
                    echo "❌ Deploy no puede marcarse como exitoso - Verificaciones fallaron"
                    echo "Deploy Verified: ${env.DEPLOY_VERIFIED}"
                    echo "Smoke Tests: ${env.SMOKE_TESTS_PASSED}"
                    
                    updateGitHubStatus('failure', 'Deploy incompleto - Verificaciones fallaron', 'production-deploy')
                    currentBuild.result = 'FAILURE'
                    error("Deploy no puede considerarse exitoso debido a verificaciones fallidas")
                }
            }
        }
        failure { 
            script {
                // ❌ FALLO - Notificar a GitHub
                updateGitHubStatus('failure', 'Deploy falló - Revisar logs de Jenkins', 'production-deploy')
                
                echo """
╔══════════════════════════════════════════════════════════════╗
║                💥 DEPLOY A PRODUCCIÓN FALLÓ                  ║
╠══════════════════════════════════════════════════════════════╣
║ Branch: ${env.BRANCH_NAME}                                   ║
║ Commit: ${env.GIT_COMMIT?.take(8)}                           ║
║ Fecha: ${new Date()}                                         ║
║ Tipo de Deploy: ${env.DEPLOY_TYPE ?: 'No especificado'}      ║
║                                                              ║
║ ❌ ESTADO: Deploy falló - Producción NO afectada             ║
║ ❌ GITHUB: Status marcado como FAILED                        ║
║                                                              ║
║ 🔴 Main branch marcada como fallida hasta resolución         ║
║                                                              ║
║ Ver detalles en Jenkins para más información                 ║
╚══════════════════════════════════════════════════════════════╝
"""
            }
        }
        cleanup {
            script {
                echo "🧹 Limpieza finalizada"
            }
        }
    }
}

def updateGitHubStatus(state, description, context) {
    try {
        def repoUrl = scm.getUserRemoteConfigs()[0].getUrl()
        def repoName = repoUrl.tokenize('/').last().replace('.git', '')
        def repoOwner = repoUrl.tokenize('/')[-2]
        
        def commitSha = env.GIT_COMMIT
        def targetUrl = "${BUILD_URL}console"
        
        def payload = [
            state: state,
            target_url: targetUrl,
            description: description,
            context: "jenkins/${context}"
        ]
        
        def jsonPayload = groovy.json.JsonOutput.toJson(payload)
        
        def response = httpRequest(
            acceptType: 'APPLICATION_JSON',
            contentType: 'APPLICATION_JSON',
            httpMode: 'POST',
            requestBody: jsonPayload,
            url: "https://api.github.com/repos/${repoOwner}/${repoName}/statuses/${commitSha}",
            customHeaders: [
                [name: 'Authorization', value: 'token ' + GITHUB_TOKEN_PSW],
                [name: 'User-Agent', value: 'Jenkins-Pipeline']
            ]
        )
        
        echo "✅ GitHub status actualizado: ${state} - ${description}"
        
    } catch (Exception e) {
        echo "⚠️ Error actualizando GitHub status: ${e.getMessage()}"
    }
}