pipeline {
    agent {label 'salesforce'}
    environment {
        GITHUB_BRANCH = 'main'
        GITHUB_TAG = 'HSU_START'
        GITHUB_BASE_API_URL = 'https://api.github.com'
        GITHUB_REPO = 'Manug0/La-Rioja-dev'
        GITHUB_AUTH_HEADER = ''

        GITHUB_TOKEN = ''

        LAST_COMMIT_SHA = ''

        AUTH_FILE_PATH = 'C:\\temp\\sfdx-auth.json'

        SF_DISABLE_TELEMETRY = 'true'
    }

    stages {
        stage('Leer datos desde GitHub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'TOKEN')]) {
                        env.GITHUB_TOKEN = TOKEN
                        env.GITHUB_AUTH_HEADER = "Authorization: Bearer ${env.GITHUB_TOKEN}"
                    }

                    def apiURL = "https://api.github.com/repos/${GITHUB_REPO}/branches/${GITHUB_BRANCH}"
                    def command = "curl -s -H \"${GITHUB_AUTH_HEADER}\" \"${apiURL}\" > branch_info.json"
                    bat command

                    def branchInfo = readJSON file: 'branch_info.json'
                    env.LAST_COMMIT_SHA = branchInfo.commit.sha

                    echo "Último commit en '${GITHUB_BRANCH}': ${env.LAST_COMMIT_SHA}"
                }
            }
        }

        stage('Instalar dependencias') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'SFDX_AUTH_URL_PRE', variable: 'SFDC_AUTH_FILE')]) {
                        bat "type %SFDC_AUTH_FILE%"
                        bat "copy %SFDC_AUTH_FILE% ${AUTH_FILE_PATH}"
                    }
                    bat "sf org login sfdx-url --sfdx-url-file ${AUTH_FILE_PATH} --set-default"
                }

                bat '''
                    sf -v
                    sf config set disable-telemetry true --global
                    echo y | sf plugins install sfdx-hardis
                    echo y | sf plugins install sfdx-git-delta
                '''

                echo "Instalamos librerías Node.js necesarias"
                bat 'npm install yaml fs'
            }
        }

        stage("Clonar proyecto desde GitHub") {
            steps {
                checkout scm
            }
        }

        stage("Crear package.xml") {
            steps {
                dir('La-Rioja-dev') {
                    bat "dir"
                    bat "sf.cmd sgd source delta --from ${GITHUB_TAG} --to ${LAST_COMMIT_SHA} --output ."
                    bat "dir package"
                    bat "type package\\package.xml"
                }
            }
        }

        stage("Validar package.xml y ejecutar pruebas") {
            steps {
                dir('La-Rioja-dev') {
                    bat "git switch ${GITHUB_BRANCH}"
                    def testList = bat(script: "node scripts\\utilities\\readTestFile.js", returnStdout: true).trim()
                    bat "sf project deploy start --manifest package\\package.xml --test-level RunSpecifiedTests --tests ${testList}"
                }
            }
        }
    }
    post {
    success {
        script {
            try {
                def payload = [
                    state      : "success",
                    context    : "Jenkins CI",
                    description: "Build passed"
                ]
                withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'TOKEN')]) {
                    httpRequest(
                        httpMode: 'POST',
                        url: "https://api.github.com/repos/${GITHUB_REPO}/statuses/${LAST_COMMIT_SHA}",
                        customHeaders: [
                            [name: 'Authorization', value: "Bearer ${TOKEN}"],
                            [name: 'Content-Type', value: 'application/json']
                        ],
                        requestBody: groovy.json.JsonOutput.toJson(payload),
                        validResponseCodes: '200:299'
                    )
                }
            } catch (Exception ex) {
                echo "Error al actualizar estado del commit como success: ${ex.getMessage()}"
            }
        }
    }
    failure {
        script {
            try {
                def payload = [
                    state      : "failure",
                    context    : "Jenkins CI",
                    description: "Build failed"
                ]
                withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'TOKEN')]) {
                    httpRequest(
                        httpMode: 'POST',
                        url: "https://api.github.com/repos/${GITHUB_REPO}/statuses/${LAST_COMMIT_SHA}",
                        customHeaders: [
                            [name: 'Authorization', value: "Bearer ${TOKEN}"],
                            [name: 'Content-Type', value: 'application/json']
                        ],
                        requestBody: groovy.json.JsonOutput.toJson(payload),
                        validResponseCodes: '200:299'
                    )
                }
            } catch (Exception ex) {
                echo "Error al actualizar estado del commit como failure: ${ex.getMessage()}"
            }
        }
    }
}

}
